@use 'sass:meta';
@use 'sass:math';
// ◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️
// インナー幅設定（最も共通の幅が多い部分）
// ◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️

$inner: 1080px;

// ※キュンパス幅ではなくインナーの幅を指す

// ◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️
// 余白
// ◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️◾️

$padding-pc: 25px;
$padding-sp: 15px;

@function strip-unit($number) {
	@if meta.type-of($number) == 'number' and not math.is-unitless($number) {
		@return math.div($number, ($number * 0 + 1));
	}

	@return $number;
}

@function vw($window_width, $size) {
	@return math.div($size, $window_width) * 100vw;
}

@function my-rem($pixels) {
	@return math.div($pixels, 16) * 1rem;
}

@function rc($min, $max, $minViewport, $maxViewport) {
	$vwScale: math.div(
		$max - $min,
		$maxViewport - $minViewport
	); // vw単位でのスケールを計算
	$baseOffset: $min - $minViewport * $vwScale; // 基準となる最小値からのオフセットを計算

	$minRem: math.div($min, 16); // 最小値をremに変換
	$maxRem: math.div($max, 16); // 最大値をremに変換
	$baseOffsetRem: math.div($baseOffset, 16); // オフセットをremに変換
	$vwScaleRem: $vwScale * 100; // vwスケールを調整

	@return clamp(
		#{$minRem}rem,
		#{$baseOffsetRem}rem + #{$vwScaleRem}vw,
		#{$maxRem}rem
	);
}

// .example {
// 	font-size: rc(24, 64, 375, 1200);
// }
